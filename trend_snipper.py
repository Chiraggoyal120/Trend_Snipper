# -*- coding: utf-8 -*-
"""trend_snipper

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szi4ULhNUJn-ZY98TQUQWfbRoyWXgQ0j
"""

!pip install gradio pandas numpy plotly requests beautifulsoup4

"""
Universal Market Trend Sniper - Enhanced Multi-Layer Analysis
Complete Frontend + Backend in Python with 6-Layer Intelligence System
Run this in Google Colab!

Installation:
!pip install gradio pandas numpy plotly requests beautifulsoup4
"""

import gradio as gr
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random

# ==================== BACKEND: DATA GENERATION ====================

class MarketDataGenerator:
    """Generate realistic market data with lifecycle patterns"""

    def __init__(self):
        self.lifecycle_stages = {
            'emergence': {'min': 0, 'max': 15, 'color': '#10b981', 'label': '🌱 EMERGENCE'},
            'acceleration': {'min': 15, 'max': 35, 'color': '#3b82f6', 'label': '🚀 ACCELERATION'},
            'peak': {'min': 35, 'max': 50, 'color': '#f59e0b', 'label': '⚡ PEAK'},
            'maturity': {'min': 50, 'max': 70, 'color': '#ef4444', 'label': '📊 MATURITY'},
            'decline': {'min': 70, 'max': 100, 'color': '#6b7280', 'label': '📉 DECLINE'}
        }

    def generate_data(self, market, query, days=90):
        """Generate market data based on lifecycle"""
        base_volume = random.uniform(10000, 60000)
        lifecycle = random.randint(0, 100)

        dates = []
        search_volume = []
        social_mentions = []
        resale_volume = []
        sentiment = []
        instagram_sentiment = []
        tiktok_sentiment = []
        reddit_sentiment = []
        google_trends = []

        for i in range(days):
            day_progress = i / days

            # Calculate volume multiplier based on lifecycle stage
            if lifecycle < 15:  # Emergence
                multiplier = np.exp(day_progress * 3) * (1 + random.uniform(0, 0.3))
            elif lifecycle < 35:  # Acceleration
                multiplier = 2 + day_progress * 5 + np.sin(day_progress * 10) * 0.5
            elif lifecycle < 50:  # Peak
                multiplier = 5 + np.sin(day_progress * 5) * 2
            elif lifecycle < 70:  # Maturity
                multiplier = 5 - day_progress * 2
            else:  # Decline
                multiplier = 2 - day_progress * 1.5 + random.uniform(0, 0.5)

            multiplier = max(0.1, multiplier)

            date = datetime.now() - timedelta(days=days-i)
            dates.append(date)
            search_volume.append(int(base_volume * multiplier))
            social_mentions.append(int(base_volume * 0.3 * multiplier * (1 + random.uniform(0, 0.4))))
            resale_volume.append(int(base_volume * 0.15 * multiplier * (1 + random.uniform(0, 0.6))))

            base_sentiment = 50 + np.sin(day_progress * 8) * 30
            sentiment.append(base_sentiment + random.uniform(-5, 5))
            instagram_sentiment.append(base_sentiment + random.uniform(-10, 10))
            tiktok_sentiment.append(base_sentiment + random.uniform(-8, 12))
            reddit_sentiment.append(base_sentiment + random.uniform(-15, 5))
            google_trends.append(min(100, multiplier * 15 + random.uniform(-5, 5)))

        df = pd.DataFrame({
            'date': dates,
            'search_volume': search_volume,
            'social_mentions': social_mentions,
            'resale_volume': resale_volume,
            'sentiment': sentiment,
            'instagram_sentiment': instagram_sentiment,
            'tiktok_sentiment': tiktok_sentiment,
            'reddit_sentiment': reddit_sentiment,
            'google_trends': google_trends
        })

        # Calculate moving averages and technical indicators
        df['ma7'] = df['search_volume'].rolling(window=7, min_periods=1).mean()
        df['ma30'] = df['search_volume'].rolling(window=30, min_periods=1).mean()
        df['velocity'] = df['search_volume'].pct_change(periods=7) * 100
        df['momentum'] = df['search_volume'].diff(periods=7)

        return df, lifecycle

    def get_stage(self, lifecycle):
        """Get current lifecycle stage"""
        for stage_name, stage_data in self.lifecycle_stages.items():
            if stage_data['min'] <= lifecycle < stage_data['max']:
                return stage_data
        return self.lifecycle_stages['decline']


# ==================== BACKEND: ENHANCED SIGNAL DETECTION ====================

class EnhancedSignalDetector:
    """Advanced signal detection with multi-layer analysis"""

    @staticmethod
    def detect_signals(df, lifecycle):
        """Detect buy/sell signals with comprehensive metrics"""
        recent = df.tail(14)
        week_ago_data = df.tail(21).head(7)
        current = recent.iloc[-1]
        week_ago = week_ago_data.iloc[-1]

        # Calculate key metrics
        velocity_change = ((current['search_volume'] - week_ago['search_volume']) /
                          week_ago['search_volume']) * 100 if week_ago['search_volume'] > 0 else 0
        volume_surge = current['search_volume'] / current['ma7'] if current['ma7'] > 0 else 1
        sentiment_delta = current['sentiment'] - week_ago['sentiment']
        social_acceleration = ((current['social_mentions'] - week_ago['social_mentions']) /
                              week_ago['social_mentions']) * 100 if week_ago['social_mentions'] > 0 else 0

        # Platform-specific sentiment changes
        instagram_change = current['instagram_sentiment'] - week_ago['instagram_sentiment']
        tiktok_change = current['tiktok_sentiment'] - week_ago['tiktok_sentiment']
        reddit_change = current['reddit_sentiment'] - week_ago['reddit_sentiment']
        google_trends_change = current['google_trends'] - week_ago['google_trends']

        # Resale metrics
        resale_change = ((current['resale_volume'] - week_ago['resale_volume']) /
                        week_ago['resale_volume']) * 100 if week_ago['resale_volume'] > 0 else 0

        # Technical indicators
        ma_trend = "Bullish" if current['ma7'] > current['ma30'] else "Bearish"
        trend_strength = abs(current['ma7'] - current['ma30']) / current['ma30'] * 100 if current['ma30'] > 0 else 0
        trend_strength_score = min(100, trend_strength * 10)

        entry_score = 0
        exit_score = 0

        # ENTRY SIGNAL LOGIC
        if velocity_change > 40 and lifecycle < 35:
            entry_score += 25
        if volume_surge > 2.5:
            entry_score += 20
        if sentiment_delta > 15:
            entry_score += 20
        if social_acceleration > 50:
            entry_score += 20
        if 10 <= lifecycle <= 25:
            entry_score += 15

        # EXIT SIGNAL LOGIC
        if velocity_change < -25:
            exit_score += 25
        if volume_surge < 0.6:
            exit_score += 20
        if sentiment_delta < -20:
            exit_score += 20
        if lifecycle > 50:
            exit_score += 20
        if social_acceleration < -30:
            exit_score += 15

        # Determine signal type
        if entry_score > 65:
            signal_type = 'STRONG BUY'
            confidence = min(95, entry_score)
        elif entry_score > 45:
            signal_type = 'BUY'
            confidence = min(85, entry_score)
        elif exit_score > 60:
            signal_type = 'SELL'
            confidence = min(90, exit_score)
        elif exit_score > 40:
            signal_type = 'WEAK SELL'
            confidence = min(75, exit_score)
        else:
            signal_type = 'HOLD'
            confidence = 60

        # Risk assessment (multiple dimensions)
        market_risk = 'HIGH' if lifecycle > 60 else 'MEDIUM' if lifecycle > 40 else 'LOW'
        sentiment_risk = 'HIGH' if abs(sentiment_delta) > 20 else 'MEDIUM' if abs(sentiment_delta) > 10 else 'LOW'
        liquidity_risk = 'HIGH' if resale_change < -30 else 'MEDIUM' if resale_change < 0 else 'LOW'
        velocity_risk = 'HIGH' if abs(velocity_change) > 50 else 'MEDIUM' if abs(velocity_change) > 30 else 'LOW'

        overall_risk = 'HIGH' if any([market_risk == 'HIGH', sentiment_risk == 'HIGH', velocity_risk == 'HIGH']) else \
                      'MEDIUM' if any([market_risk == 'MEDIUM', sentiment_risk == 'MEDIUM', velocity_risk == 'MEDIUM']) else 'LOW'

        risk_color = '#ef4444' if overall_risk == 'HIGH' else '#f59e0b' if overall_risk == 'MEDIUM' else '#10b981'

        allocation = '0%'
        if 'BUY' in signal_type:
            if overall_risk == 'LOW':
                allocation = '30-50%'
            elif overall_risk == 'MEDIUM':
                allocation = '15-30%'
            else:
                allocation = '5-15%'

        timeframe = '1-2 weeks'
        if lifecycle < 20:
            timeframe = '3-6 weeks'
        elif lifecycle < 40:
            timeframe = '2-4 weeks'

        return {
            'signal_type': signal_type,
            'confidence': int(confidence),
            'entry_score': int(entry_score),
            'exit_score': int(exit_score),
            'velocity_change': round(velocity_change, 1),
            'volume_surge': round(volume_surge, 2),
            'sentiment_delta': round(sentiment_delta, 1),
            'social_acceleration': round(social_acceleration, 1),
            'risk_level': overall_risk,
            'risk_color': risk_color,
            'allocation': allocation,
            'timeframe': timeframe,
            'lifecycle': lifecycle,
            'current_volume': int(current['search_volume']),
            'current_sentiment': round(current['sentiment'], 1),
            'resale_volume': int(current['resale_volume']),
            'resale_change': round(resale_change, 1),
            'social_mentions': int(current['social_mentions']),
            'instagram_sentiment': round(current['instagram_sentiment'], 1),
            'tiktok_sentiment': round(current['tiktok_sentiment'], 1),
            'reddit_sentiment': round(current['reddit_sentiment'], 1),
            'google_trends': round(current['google_trends'], 1),
            'instagram_change': round(instagram_change, 1),
            'tiktok_change': round(tiktok_change, 1),
            'reddit_change': round(reddit_change, 1),
            'google_trends_change': round(google_trends_change, 1),
            'ma_trend': ma_trend,
            'trend_strength': round(trend_strength_score, 1),
            'market_risk': market_risk,
            'sentiment_risk': sentiment_risk,
            'liquidity_risk': liquidity_risk,
            'velocity_risk': velocity_risk
        }


# ==================== FRONTEND: ENHANCED VISUALIZATION ====================

class EnhancedTrendVisualizer:
    """Create comprehensive multi-layer visualizations"""

    @staticmethod
    def create_volume_chart(df):
        """Create search volume and moving averages chart"""
        fig = go.Figure()

        fig.add_trace(go.Scatter(
            x=df['date'], y=df['search_volume'],
            fill='tozeroy',
            name='Search Volume',
            line=dict(color='#3b82f6', width=2),
            fillcolor='rgba(59, 130, 246, 0.3)'
        ))

        fig.add_trace(go.Scatter(
            x=df['date'], y=df['ma7'],
            name='MA7',
            line=dict(color='#f59e0b', width=2)
        ))

        fig.add_trace(go.Scatter(
            x=df['date'], y=df['ma30'],
            name='MA30',
            line=dict(color='#ef4444', width=2)
        ))

        fig.update_layout(
            title='📊 Search Volume & Moving Averages',
            template='plotly_dark',
            hovermode='x unified',
            height=400,
            paper_bgcolor='rgba(15, 23, 42, 0.8)',
            plot_bgcolor='rgba(15, 23, 42, 0.8)',
        )

        return fig

    @staticmethod
    def create_sentiment_breakdown_chart(signal):
        """Create platform-specific sentiment breakdown"""
        platforms = ['Instagram', 'TikTok', 'Reddit', 'Google Trends']
        sentiments = [
            signal['instagram_sentiment'],
            signal['tiktok_sentiment'],
            signal['reddit_sentiment'],
            signal['google_trends']
        ]
        changes = [
            signal['instagram_change'],
            signal['tiktok_change'],
            signal['reddit_change'],
            signal['google_trends_change']
        ]

        colors = ['#E1306C', '#000000', '#FF4500', '#4285F4']

        fig = go.Figure()

        fig.add_trace(go.Bar(
            x=platforms,
            y=sentiments,
            marker_color=colors,
            text=[f"{s:.1f}" for s in sentiments],
            textposition='auto',
            name='Current Sentiment'
        ))

        fig.update_layout(
            title='📱 Platform Sentiment Breakdown',
            template='plotly_dark',
            height=400,
            paper_bgcolor='rgba(15, 23, 42, 0.8)',
            plot_bgcolor='rgba(15, 23, 42, 0.8)',
            yaxis_range=[0, 100]
        )

        return fig

    @staticmethod
    def create_risk_radar(signal):
        """Create multi-dimensional risk assessment radar"""
        categories = ['Market Risk', 'Sentiment Risk', 'Liquidity Risk',
                     'Velocity Risk', 'Competition']

        risk_map = {'LOW': 30, 'MEDIUM': 60, 'HIGH': 90}

        values = [
            risk_map[signal['market_risk']],
            risk_map[signal['sentiment_risk']],
            risk_map[signal['liquidity_risk']],
            risk_map[signal['velocity_risk']],
            min(90, signal['lifecycle'])
        ]

        fig = go.Figure(data=go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            line=dict(color='#ef4444', width=2),
            fillcolor='rgba(239, 68, 68, 0.4)'
        ))

        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100],
                    gridcolor='rgba(255, 255, 255, 0.2)'
                ),
                bgcolor='rgba(15, 23, 42, 0.8)'
            ),
            title='⚠️ Multi-Dimensional Risk Assessment',
            template='plotly_dark',
            height=400,
            paper_bgcolor='rgba(15, 23, 42, 0.8)',
        )

        return fig


# ==================== MAIN APPLICATION ====================

class EnhancedTrendSniperApp:
    """Enhanced application with 6-layer intelligence system"""

    def __init__(self):
        self.data_gen = MarketDataGenerator()
        self.detector = EnhancedSignalDetector()
        self.visualizer = EnhancedTrendVisualizer()

        self.markets = {
            '👟 Sneakers & Shoes': 'sneakers',
            '🚗 Automotive': 'cars',
            '👔 Fashion & Apparel': 'fashion',
            '📱 Tech & Gadgets': 'tech',
            '₿ Crypto & NFTs': 'crypto',
            '💄 Beauty & Cosmetics': 'beauty',
            '⌚ Luxury Watches': 'watches',
            '🎮 Gaming': 'gaming',
            '🏠 Home & Furniture': 'home',
            '💎 Collectibles': 'collectibles'
        }

    def get_direction_arrow(self, value):
        """Get direction arrow and color"""
        if value > 0:
            return '↑', '#10b981'
        elif value < 0:
            return '↓', '#ef4444'
        else:
            return '→', '#94a3b8'

    def get_sentiment_emoji(self, sentiment):
        """Get sentiment emoji"""
        if sentiment >= 70:
            return '😊'
        elif sentiment >= 50:
            return '😐'
        else:
            return '😞'

    def generate_insight(self, signal, stage):
        """Generate AI-powered insight summary"""
        insights = []

        # Velocity insight
        if signal['velocity_change'] < -25:
            insights.append(f"⚠️ Trend velocity ({signal['velocity_change']}%) confirms sharp decline.")
        elif signal['velocity_change'] > 40:
            insights.append(f"🚀 Explosive velocity ({signal['velocity_change']}%) indicates strong momentum.")

        # Lifecycle insight
        if signal['lifecycle'] > 70:
            insights.append(f"📉 Mature lifecycle stage ({signal['lifecycle']}%) suggests saturation.")
        elif signal['lifecycle'] < 20:
            insights.append(f"🌱 Early-stage trend ({signal['lifecycle']}%) presents growth opportunity.")

        # Sentiment insight
        if signal['sentiment_delta'] < -15:
            insights.append("💔 Sentiment and buzz decreasing rapidly.")
        elif signal['sentiment_delta'] > 15:
            insights.append("💚 Positive sentiment surge indicates growing interest.")

        # Action recommendation
        if signal['signal_type'] in ['SELL', 'WEAK SELL']:
            insights.append(f"🎯 Recommendation: Exit positions and pivot to next emerging trend.")
        elif signal['signal_type'] in ['STRONG BUY', 'BUY']:
            insights.append(f"🎯 Recommendation: Consider {signal['allocation']} allocation over {signal['timeframe']}.")
        else:
            insights.append("🎯 Recommendation: Monitor closely for clearer signals before action.")

        return " ".join(insights)

    def analyze_trend(self, market, query):
        """Main analysis function with 6-layer intelligence"""
        if not query:
            query = "Sample Trend Analysis"

        # Generate data
        df, lifecycle = self.data_gen.generate_data(market, query)

        # Detect signals
        signal = self.detector.detect_signals(df, lifecycle)

        # Get lifecycle stage
        stage = self.data_gen.get_stage(lifecycle)

        # Create visualizations
        vol_chart = self.visualizer.create_volume_chart(df)
        sentiment_chart = self.visualizer.create_sentiment_breakdown_chart(signal)
        risk_chart = self.visualizer.create_risk_radar(signal)

        # Generate comprehensive report
        signal_color = '#10b981' if 'BUY' in signal['signal_type'] else '#ef4444' if 'SELL' in signal['signal_type'] else '#6b7280'

        # Header summary
        summary = f"""
        <div style="background: linear-gradient(135deg, {signal_color}22, {signal_color}11);
                    border: 2px solid {signal_color}; border-radius: 12px; padding: 24px; margin: 20px 0;">
            <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 16px;">
                <div>
                    <h2 style="color: {signal_color}; margin: 0 0 8px 0; font-size: 32px;">
                        {signal['signal_type']}
                    </h2>
                    <p style="color: #94a3b8; margin: 0; font-size: 18px;">{query}</p>
                </div>
                <div style="background: {signal_color}; border-radius: 8px; padding: 16px 24px;">
                    <div style="color: rgba(255,255,255,0.8); font-size: 12px; margin-bottom: 4px;">MODEL CONFIDENCE</div>
                    <span style="font-size: 32px; font-weight: bold; color: white;">
                        {signal['confidence']}%
                    </span>
                </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px; margin: 20px 0;">
                <div style="background: rgba(16, 185, 129, 0.1); padding: 16px; border-radius: 8px;">
                    <div style="color: #94a3b8; font-size: 12px; margin-bottom: 4px;">ENTRY SCORE</div>
                    <div style="color: #10b981; font-size: 32px; font-weight: bold;">{signal['entry_score']}</div>
                </div>
                <div style="background: rgba(239, 68, 68, 0.1); padding: 16px; border-radius: 8px;">
                    <div style="color: #94a3b8; font-size: 12px; margin-bottom: 4px;">EXIT SCORE</div>
                    <div style="color: #ef4444; font-size: 32px; font-weight: bold;">{signal['exit_score']}</div>
                </div>
            </div>

            <div style="background: rgba(0,0,0,0.3); border-radius: 8px; padding: 16px; margin: 16px 0;">
                <div style="color: #94a3b8; font-size: 12px; margin-bottom: 8px;">LIFECYCLE STAGE</div>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <span style="color: {stage['color']}; font-weight: bold; font-size: 16px;">
                        {stage['label']}
                    </span>
                    <span style="color: white; font-size: 14px;">{lifecycle}%</span>
                </div>
                <div style="height: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; overflow: hidden;">
                    <div style="height: 100%; width: {lifecycle}%; background: {stage['color']};"></div>
                </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 12px; font-size: 13px; color: white;">
                <div>
                    <span style="color: #94a3b8;">RISK LEVEL:</span>
                    <span style="color: {signal['risk_color']}; font-weight: bold;">{signal['risk_level']}</span>
                </div>
                <div>
                    <span style="color: #94a3b8;">ALLOCATION:</span>
                    <span style="font-weight: bold;">{signal['allocation']}</span>
                </div>
                <div>
                    <span style="color: #94a3b8;">TIMEFRAME:</span>
                    <span style="font-weight: bold;">{signal['timeframe']}</span>
                </div>
                <div>
                    <span style="color: #94a3b8;">VELOCITY:</span>
                    <span style="color: {'#10b981' if signal['velocity_change'] > 0 else '#ef4444'}; font-weight: bold;">
                        {signal['velocity_change']:+.1f}%
                    </span>
                </div>
            </div>
        </div>
        """

        # Layer 1: Data Layer
        vel_arrow, vel_color = self.get_direction_arrow(signal['velocity_change'])
        sent_arrow, sent_color = self.get_direction_arrow(signal['sentiment_delta'])
        resale_arrow, resale_color = self.get_direction_arrow(signal['resale_change'])
        social_arrow, social_color = self.get_direction_arrow(signal['social_acceleration'])

        data_layer = f"""
        <div style="background: rgba(255,255,255,0.05); border-radius: 12px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #60a5fa; margin-top: 0;">1️⃣ DATA LAYER — Raw Metrics</h3>
            <table style="width: 100%; border-collapse: collapse; color: #e2e8f0;">
                <thead>
                    <tr style="border-bottom: 2px solid rgba(255,255,255,0.1);">
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Metric</th>
                        <th style="text-align: right; padding: 12px; color: #94a3b8;">Current Value</th>
                        <th style="text-align: right; padding: 12px; color: #94a3b8;">7D Change</th>
                        <th style="text-align: center; padding: 12px; color: #94a3b8;">Direction</th>
                        <th style="text-align: right; padding: 12px; color: #94a3b8;">Confidence</th>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Search Volume</td>
                        <td style="text-align: right; padding: 12px; font-weight: bold;">{signal['current_volume']:,}</td>
                        <td style="text-align: right; padding: 12px; color: {vel_color}; font-weight: bold;">{signal['velocity_change']:+.1f}%</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">{vel_arrow}</td>
                        <td style="text-align: right; padding: 12px;">{signal['confidence']}%</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Velocity</td>
                        <td style="text-align: right; padding: 12px; font-weight: bold;">{signal['velocity_change']:.1f}%</td>
                        <td style="text-align: right; padding: 12px;">—</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">{vel_arrow}</td>
                        <td style="text-align: right; padding: 12px;">{min(95, abs(int(signal['velocity_change'])))}%</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Social Sentiment</td>
                        <td style="text-align: right; padding: 12px; font-weight: bold;">{signal['current_sentiment']:.1f}%</td>
                        <td style="text-align: right; padding: 12px; color: {sent_color}; font-weight: bold;">{signal['sentiment_delta']:+.1f}%</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">{sent_arrow}</td>
                        <td style="text-align: right; padding: 12px;">{min(90, 60 + abs(int(signal['sentiment_delta'])))}%</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Resale Volume</td>
                        <td style="text-align: right; padding: 12px; font-weight: bold;">{signal['resale_volume']:,}</td>
                        <td style="text-align: right; padding: 12px; color: {resale_color}; font-weight: bold;">{signal['resale_change']:+.1f}%</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">{resale_arrow}</td>
                        <td style="text-align: right; padding: 12px;">{min(85, 65 + abs(int(signal['resale_change']//2)))}%</td>
                    </tr>
                    <tr>
                        <td style="padding: 12px;">Mentions/Buzz</td>
                        <td style="text-align: right; padding: 12px; font-weight: bold;">{signal['social_mentions']:,}</td>
                        <td style="text-align: right; padding: 12px; color: {social_color}; font-weight: bold;">{signal['social_acceleration']:+.1f}%</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">{social_arrow}</td>
                        <td style="text-align: right; padding: 12px;">{min(88, 70 + abs(int(signal['social_acceleration']//3)))}%</td>
                    </tr>
                </tbody>
            </table>
        </div>
        """

        # Layer 2: Technical Layer
        ma_interpretation = "Gaining momentum" if signal['ma_trend'] == "Bullish" else "Losing momentum"
        trend_interpretation = "Strong" if signal['trend_strength'] > 60 else "Weak" if signal['trend_strength'] < 30 else "Moderate"
        lifecycle_interpretation = "Early Growth" if lifecycle < 25 else "Acceleration" if lifecycle < 50 else "Maturity" if lifecycle < 70 else "Decline"

        technical_layer = f"""
        <div style="background: rgba(255,255,255,0.05); border-radius: 12px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #a78bfa; margin-top: 0;">2️⃣ TECHNICAL LAYER — Patterns</h3>
            <table style="width: 100%; border-collapse: collapse; color: #e2e8f0;">
                <thead>
                    <tr style="border-bottom: 2px solid rgba(255,255,255,0.1);">
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Indicator</th>
                        <th style="text-align: center; padding: 12px; color: #94a3b8;">Value</th>
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Interpretation</th>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Moving Average (30D)</td>
                        <td style="text-align: center; padding: 12px; font-size: 24px; color: {'#10b981' if signal['ma_trend'] == 'Bullish' else '#ef4444'};">
                            {vel_arrow}
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{ma_interpretation}</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Trend Strength Index</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold;">{signal['trend_strength']:.0f}/100</td>
                        <td style="padding: 12px; color: #94a3b8;">{trend_interpretation} trend momentum</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Lifecycle Stage</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold; color: {stage['color']};">{lifecycle}%</td>
                        <td style="padding: 12px; color: #94a3b8;">{lifecycle_interpretation} phase</td>
                    </tr>
                    <tr>
                        <td style="padding: 12px;">Momentum Velocity</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold; color: {vel_color};">{signal['velocity_change']:+.1f}%</td>
                        <td style="padding: 12px; color: #94a3b8;">{'Accelerating' if signal['velocity_change'] > 0 else 'Decelerating'} trend</td>
                    </tr>
                </tbody>
            </table>
        </div>
        """

        # Layer 3: Sentiment & Buzz Layer
        sentiment_layer = f"""
        <div style="background: rgba(255,255,255,0.05); border-radius: 12px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #10b981; margin-top: 0;">3️⃣ SENTIMENT & BUZZ LAYER</h3>
            <table style="width: 100%; border-collapse: collapse; color: #e2e8f0;">
                <thead>
                    <tr style="border-bottom: 2px solid rgba(255,255,255,0.1);">
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Platform</th>
                        <th style="text-align: center; padding: 12px; color: #94a3b8;">Sentiment</th>
                        <th style="text-align: right; padding: 12px; color: #94a3b8;">Change</th>
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Comment</th>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">📷 Instagram</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">
                            {self.get_sentiment_emoji(signal['instagram_sentiment'])} {signal['instagram_sentiment']:.0f}%
                        </td>
                        <td style="text-align: right; padding: 12px; color: {'#10b981' if signal['instagram_change'] > 0 else '#ef4444'}; font-weight: bold;">
                            {signal['instagram_change']:+.1f}%
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'Strong visual appeal' if signal['instagram_sentiment'] > 60 else 'Declining interest'}</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">🎵 TikTok</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">
                            {self.get_sentiment_emoji(signal['tiktok_sentiment'])} {signal['tiktok_sentiment']:.0f}%
                        </td>
                        <td style="text-align: right; padding: 12px; color: {'#10b981' if signal['tiktok_change'] > 0 else '#ef4444'}; font-weight: bold;">
                            {signal['tiktok_change']:+.1f}%
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'Viral potential high' if signal['tiktok_sentiment'] > 60 else 'Limited traction'}</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">🗨️ Reddit</td>
                        <td style="text-align: center; padding: 12px; font-size: 20px;">
                            {self.get_sentiment_emoji(signal['reddit_sentiment'])} {signal['reddit_sentiment']:.0f}%
                        </td>
                        <td style="text-align: right; padding: 12px; color: {'#10b981' if signal['reddit_change'] > 0 else '#ef4444'}; font-weight: bold;">
                            {signal['reddit_change']:+.1f}%
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'Community engaged' if signal['reddit_sentiment'] > 50 else 'Mixed reactions'}</td>
                    </tr>
                    <tr>
                        <td style="padding: 12px;">🔍 Google Trends</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold;">
                            {signal['google_trends']:.0f}/100
                        </td>
                        <td style="text-align: right; padding: 12px; color: {'#10b981' if signal['google_trends_change'] > 0 else '#ef4444'}; font-weight: bold;">
                            {signal['google_trends_change']:+.1f}%
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'High search interest' if signal['google_trends'] > 60 else 'Moderate interest'}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        """

        # Layer 4: Risk & Investment Layer
        risk_layer = f"""
        <div style="background: rgba(255,255,255,0.05); border-radius: 12px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #f59e0b; margin-top: 0;">4️⃣ RISK & INVESTMENT LAYER</h3>
            <table style="width: 100%; border-collapse: collapse; color: #e2e8f0;">
                <thead>
                    <tr style="border-bottom: 2px solid rgba(255,255,255,0.1);">
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Risk Type</th>
                        <th style="text-align: center; padding: 12px; color: #94a3b8;">Level</th>
                        <th style="text-align: left; padding: 12px; color: #94a3b8;">Recommendation</th>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Market Risk</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold; color: {'#ef4444' if signal['market_risk'] == 'HIGH' else '#f59e0b' if signal['market_risk'] == 'MEDIUM' else '#10b981'};">
                            {signal['market_risk']}
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'High competition, proceed cautiously' if signal['market_risk'] == 'HIGH' else 'Moderate competition' if signal['market_risk'] == 'MEDIUM' else 'Favorable market conditions'}</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Sentiment Risk</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold; color: {'#ef4444' if signal['sentiment_risk'] == 'HIGH' else '#f59e0b' if signal['sentiment_risk'] == 'MEDIUM' else '#10b981'};">
                            {signal['sentiment_risk']}
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'Volatile sentiment, monitor closely' if signal['sentiment_risk'] == 'HIGH' else 'Stable sentiment' if signal['sentiment_risk'] == 'MEDIUM' else 'Positive sentiment trend'}</td>
                    </tr>
                    <tr style="border-bottom: 1px solid rgba(255,255,255,0.05);">
                        <td style="padding: 12px;">Liquidity Risk</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold; color: {'#ef4444' if signal['liquidity_risk'] == 'HIGH' else '#f59e0b' if signal['liquidity_risk'] == 'MEDIUM' else '#10b981'};">
                            {signal['liquidity_risk']}
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'Low resale activity, exit difficult' if signal['liquidity_risk'] == 'HIGH' else 'Moderate liquidity' if signal['liquidity_risk'] == 'MEDIUM' else 'Strong resale market'}</td>
                    </tr>
                    <tr>
                        <td style="padding: 12px;">Velocity Risk</td>
                        <td style="text-align: center; padding: 12px; font-weight: bold; color: {'#ef4444' if signal['velocity_risk'] == 'HIGH' else '#f59e0b' if signal['velocity_risk'] == 'MEDIUM' else '#10b981'};">
                            {signal['velocity_risk']}
                        </td>
                        <td style="padding: 12px; color: #94a3b8;">{'Extreme volatility, risk of reversal' if signal['velocity_risk'] == 'HIGH' else 'Moderate momentum shifts' if signal['velocity_risk'] == 'MEDIUM' else 'Stable growth trajectory'}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        """

        # Layer 5: Strategy & Execution Layer
        if signal['signal_type'] in ['STRONG BUY', 'BUY']:
            action_plan = f"""
                <li>✅ <strong>Initiate positions</strong> with {signal['allocation']} allocation</li>
                <li>📈 <strong>Scale in gradually</strong> over {signal['timeframe']}</li>
                <li>🎯 <strong>Set profit targets</strong> at +30%, +50%, +75%</li>
                <li>⚠️ <strong>Place stop-loss</strong> at -25% velocity decline</li>
                <li>📊 <strong>Monitor daily</strong> for momentum shifts</li>
            """
        elif signal['signal_type'] in ['SELL', 'WEAK SELL']:
            action_plan = f"""
                <li>🛑 <strong>Stop new investments</strong> immediately</li>
                <li>💰 <strong>Liquidate inventory</strong> at current prices</li>
                <li>🔄 <strong>Pivot to next trend</strong> opportunities</li>
                <li>📁 <strong>Archive best-performing</strong> content for future</li>
                <li>📊 <strong>Analyze data</strong> for lessons learned</li>
            """
        else:
            action_plan = f"""
                <li>👀 <strong>Monitor closely</strong> for clearer signals</li>
                <li>🔍 <strong>Research competitors</strong> and market dynamics</li>
                <li>📊 <strong>Track metrics daily</strong> for trend changes</li>
                <li>⏰ <strong>Prepare entry/exit</strong> strategies</li>
                <li>💡 <strong>Stay informed</strong> on market developments</li>
            """

        strategy_layer = f"""
        <div style="background: rgba(255,255,255,0.05); border-radius: 12px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #ef4444; margin-top: 0;">5️⃣ STRATEGY & EXECUTION LAYER</h3>
            <div style="background: rgba(0,0,0,0.3); border-radius: 8px; padding: 16px; margin-bottom: 16px;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                    <div>
                        <div style="color: #94a3b8; font-size: 12px; margin-bottom: 4px;">SIGNAL</div>
                        <div style="color: {signal_color}; font-size: 20px; font-weight: bold;">{signal['signal_type']}</div>
                    </div>
                    <div>
                        <div style="color: #94a3b8; font-size: 12px; margin-bottom: 4px;">TIMEFRAME</div>
                        <div style="color: #e2e8f0; font-size: 20px; font-weight: bold;">{signal['timeframe']}</div>
                    </div>
                </div>
            </div>
            <div style="color: #e2e8f0;">
                <h4 style="color: #60a5fa; margin: 16px 0 12px 0;">📋 Action Plan:</h4>
                <ul style="line-height: 1.8;">
                    {action_plan}
                </ul>
            </div>
        </div>
        """

        # Layer 6: Insight Layer
        insight_text = self.generate_insight(signal, stage)

        insight_layer = f"""
        <div style="background: linear-gradient(135deg, rgba(96, 165, 250, 0.2), rgba(167, 139, 250, 0.2));
                    border: 2px solid rgba(96, 165, 250, 0.5); border-radius: 12px; padding: 24px; margin: 20px 0;">
            <h3 style="color: #60a5fa; margin-top: 0;">6️⃣ INSIGHT LAYER — AI Summary</h3>
            <p style="color: #e2e8f0; font-size: 16px; line-height: 1.8; margin: 0;">
                {insight_text}
            </p>
        </div>
        """

        # Risk Management Rules
        risk_management = f"""
        <div style="background: rgba(239, 68, 68, 0.1); border: 2px solid rgba(239, 68, 68, 0.3);
                    border-radius: 12px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #ef4444; margin-top: 0;">⚠️ RISK MANAGEMENT RULES</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; color: #e2e8f0;">
                <div>
                    <h4 style="color: #10b981; margin-top: 0;">Position Sizing:</h4>
                    <div style="line-height: 1.8;">
                        🟢 <strong>Low Risk:</strong> 30-50% allocation<br/>
                        🟡 <strong>Medium Risk:</strong> 15-30% allocation<br/>
                        🔴 <strong>High Risk:</strong> 5-15% allocation
                    </div>
                </div>
                <div>
                    <h4 style="color: #ef4444; margin-top: 0;">Stop-Loss Triggers:</h4>
                    <div style="line-height: 1.8;">
                        • <strong>-25% Velocity</strong> → Exit 50% of position<br/>
                        • <strong>-35% Velocity</strong> → Full exit immediately<br/>
                        • <strong>Sentiment Crash</strong> → Emergency exit
                    </div>
                </div>
            </div>
        </div>
        """

        # Final notes
        final_notes = """
        <div style="text-align: center; padding: 20px; background: rgba(255,255,255,0.03);
                    border-radius: 8px; margin: 20px 0; color: #94a3b8; font-size: 13px;">
            <div style="margin-bottom: 12px; font-size: 16px; color: #e2e8f0;">
                <strong>📊 FINAL NOTES</strong>
            </div>
            <div style="line-height: 1.8;">
                <strong style="color: #60a5fa;">Built for:</strong> Precision timing across any market<br/>
                <strong style="color: #a78bfa;">Core Features:</strong> Real-time data signals • Risk-managed execution • Multi-layer insights<br/>
                <strong style="color: #10b981;">Powered by:</strong> Universal Market Trend Sniper AI v2.0
            </div>
        </div>
        """

        # Combine all layers
        full_report = (summary + data_layer + technical_layer + sentiment_layer +
                      risk_layer + strategy_layer + insight_layer + risk_management + final_notes)

        return (
            full_report,
            vol_chart,
            sentiment_chart,
            risk_chart
        )


# ==================== GRADIO INTERFACE ====================

def create_interface():
    """Create enhanced Gradio interface"""
    app = EnhancedTrendSniperApp()

    with gr.Blocks(
        title="🎯 Universal Market Trend Sniper - Enhanced",
        theme=gr.themes.Base(primary_hue="blue", secondary_hue="purple"),
        css="""
        .gradio-container {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%) !important;
        }
        """
    ) as interface:

        gr.HTML("""
        <div style="text-align: center; padding: 40px; background: rgba(255,255,255,0.05);
                    border-radius: 16px; margin-bottom: 20px; backdrop-filter: blur(10px);
                    border: 2px solid rgba(96, 165, 250, 0.3);">
            <h1 style="font-size: 48px; margin: 0 0 10px 0;
                       background: linear-gradient(135deg, #60a5fa, #a78bfa, #10b981);
                       -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
                🎯 UNIVERSAL MARKET TREND SNIPER
            </h1>
            <p style="font-size: 20px; color: #94a3b8; margin: 8px 0;">
                6-Layer Intelligence System • Real-Time Precision Signals • Any Market Analysis
            </p>
            <p style="font-size: 14px; color: #64748b; margin: 0;">
                Data Layer • Technical Layer • Sentiment Layer • Risk Layer • Strategy Layer • Insight Layer
            </p>
        </div>
        """)

        with gr.Row():
            market_dropdown = gr.Dropdown(
                choices=list(app.markets.keys()),
                value='👟 Sneakers & Shoes',
                label="📊 SELECT MARKET",
                scale=1
            )

            query_input = gr.Textbox(
                label="🔍 TREND / PRODUCT NAME",
                placeholder="e.g., Tesla Model Y, Jordan 4, iPhone 16 Pro, Bitcoin ETF...",
                scale=2
            )

            analyze_btn = gr.Button(
                "🎯 EXECUTE MULTI-LAYER ANALYSIS",
                variant="primary",
                scale=1,
                size="lg"
            )

        gr.HTML("""
        <div style="background: rgba(96, 165, 250, 0.1); border-left: 4px solid #60a5fa;
                    padding: 16px; margin: 20px 0; border-radius: 8px;">
            <p style="color: #e2e8f0; margin: 0; font-size: 14px;">
                💡 <strong>Pro Tip:</strong> Enter multiple products separated by commas for comparative analysis,
                or use specific model names for precise signals (e.g., "iPhone 16 Pro Max" vs "iPhone 16")
            </p>
        </div>
        """)

        with gr.Column():
            full_report = gr.HTML(label="Complete 6-Layer Analysis Report")

            gr.HTML("""
            <h2 style="color: #60a5fa; text-align: center; margin: 30px 0 20px 0; font-size: 28px;">
                📈 VISUAL INTELLIGENCE DASHBOARD
            </h2>
            """)

            with gr.Row():
                volume_plot = gr.Plot(label="📊 Search Volume & Technical Indicators")
                sentiment_plot = gr.Plot(label="📱 Platform Sentiment Breakdown")

            with gr.Row():
                risk_plot = gr.Plot(label="⚠️ Multi-Dimensional Risk Radar")

        gr.HTML("""
        <div style="text-align: center; padding: 30px; margin-top: 30px;
                    background: rgba(255,255,255,0.03); border-radius: 12px;">
            <div style="margin-bottom: 16px; font-size: 18px; color: #e2e8f0; font-weight: bold;">
                🚀 Built for Professional Market Intelligence
            </div>
            <div style="color: #94a3b8; font-size: 14px; line-height: 1.8;">
                🎯 Precision Entry & Exit Timing • 📊 Multi-Layer Data Analysis • ⚠️ Risk-Managed Execution<br/>
                💡 AI-Powered Insights • 🔄 Real-Time Market Signals • 📈 Any Market, Any Product
            </div>
            <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid rgba(255,255,255,0.1);
                        color: #64748b; font-size: 12px;">
                Version 2.0 Enhanced • 6-Layer Intelligence System • Updated October 2025
            </div>
        </div>
        """)

        analyze_btn.click(
            fn=app.analyze_trend,
            inputs=[market_dropdown, query_input],
            outputs=[full_report, volume_plot, sentiment_plot, risk_plot]
        )

    return interface


# ==================== RUN APPLICATION ====================

if __name__ == "__main__":
    interface = create_interface()
    interface.launch(
        share=True,  # Creates public URL for sharing
        debug=True
    )